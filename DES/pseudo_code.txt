generate_round_keys(key)
{
    Initializing PC1 table: int pc1[56];
	
    Initializing PC2 table: int pc2[48];
    
    // Compressing the key using the PC1 table
	for(int i = 0; i < 56; i++)
		strncat(perm_key, &key[pc1[i]-1], 1); 

	// Dividing the result into two equal halves
    substring(perm_key,left,1,28);
    substring(perm_key,right,29,28);
    
    // Generating 16 keys
    for(int i = 0; i<16; i++)
    {
        // For rounds 1, 2, 9, 16 the key_chunks are shifted by one; for other rounds: its two left shifts
        if(i == 0 || i == 1 || i==8 || i==15 )
            shifting the left and right sub-keys to left by one position
        else
            shifting the left and right sub-keys to left by two position
        
        // The chunks are combined
        strcat(left, right);
        
        // Finally, the PC2 table is used to transpose the key bits
        for(int i = 0; i < 48; i++)
            strncat(round_key,&combined_key[pc2[i]-1],1); 

        // Storing the keys in 2D char array
        strcpy(encryption_keys[i],round_key);
    }
}

des(plain_text, round_keys)
{
    Initialising initial permutation table: int initial_permutation[64];
    
    Initialising expansion table: int expansion_table[48]; 
    
    Initialising the substitution boxes: int substition_boxes[8][4][16]; 

	Initialising the permutation table: int permutation_tab[32];

    Initialising inverse permutation table: int inverse_permutation[64];

    // Applying the initial permutation; resultant string is 'perm'
	for(int i = 0; i < 64; i++)
		strncat(perm, &plain_text[initial_permutation[i]-1],1); 

    // Dividing the result into two equal halves 
    substring(perm,left,1,32);
    substring(perm,right,33,32);

    // The plain text is encrypted 16 times 
    for(int i = 0; i<16; i++)
    {		
        // The right half of the plain text is expanded
    	for(int i = 0; i < 48; i++)  
      		strncat(right_expanded,&right[expansion_table[i]-1],1); 

        // The result is xored with a key of respective round
        xor(round_keys[i], right_expanded, xored, 48);

        // The result is divided into 8 equal parts and passed through 8 substitution boxes. After passing through a substitution box, each box is reduces from 6 to 4 bits.

		for(int i=0; i<8; i++)
		{ 
			// Finding row and column indices to lookup the substituition box
            substring(xored,xored_substring1,(i*6)+1,1);
            substring(xored,xored_substring2,(i*6+5)+1,1);
            strcat(row1,xored_substring1);
            strcat(row1,xored_substring2);
      		int row = bin_to_dec(row1);

            substring(xored,xored_substring3,(i*6+1)+1,1);
            substring(xored,xored_substring4,(i*6+2)+1,1);
            substring(xored,xored_substring5,(i*6+3)+1,1);
            substring(xored,xored_substring6,(i*6+4)+1,1);
            strcat(col1,xored_substring3);
            strcat(col1,xored_substring4);
            strcat(col1,xored_substring5);
            strcat(col1,xored_substring6);
            
			int col = bin_to_dec(col1);

			int val = substition_boxes[i][row][col];
            dec_to_bin(val,value1);
			strcat(res,value1);
		}

        for(int i = 0; i < 32; i++)
		    strncat(perm2, &res[permutation_tab[i]-1], 1);

        // The result is xored with the left half
		xor(perm2, left, xored1, 32);

		// The left and the right parts of the plain text are swapped 
        strcpy(left,xored1);
        if(i < 15)
            swap(left, right);
    }

    // The halves of the plain text are combined
    strcat(left, right);

	// The inverse of the initial permutation is applied
	for(int i = 0; i < 64; i++)
        strncat(ciphertext, &combined_text[inverse_permutation[i]-1], 1); 
    
    // Resultant string is stored in a file
}

encryption()
{
    Input key and message from user;
    Convert key and message to binary string;
    generate_round_keys(key in binary);
    encryption(plain_text in binary, round_keys);
    print(cipher_text);
}

decryption()
{
    generate_round_keys(key in binary);

    // Reverse the array storing the 16 round_keys
    for (int j=0, i=15; j<16; j++)
    {
        strcpy(decryption_keys[j],round_keys[i]);  
        i--;
    }
    decryption(cipher_text in binary, decryption_keys);
    Convert the decrypted text from binary to alphabetical string
    print(decrypted_text);
}
